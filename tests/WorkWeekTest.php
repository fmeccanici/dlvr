<?php

use Fmeccanici\Dlvr\CreateWorkDay;
use Fmeccanici\Dlvr\CreateWorkWeek;
use Fmeccanici\Dlvr\DayOfWeek;
use Fmeccanici\Dlvr\Exceptions\InvalidDayOfWeekException;
use Fmeccanici\Dlvr\Time;
use Fmeccanici\Dlvr\WorkDay;
use Fmeccanici\Dlvr\WorkingHours;
use Fmeccanici\Dlvr\WorkSchedule;
use PHPUnit\Framework\TestCase;

class WorkWeekTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }
    
    /** @test */
    public function it_should_set_work_day()
    {
        // Given
        $workWeek = CreateWorkWeek::regular();
        $workDay = CreateWorkDay::monday(12, 0, 0, 17, 0, 0);

        // When
        $workWeek->setWorkDay($workDay);

        // Then
        self::assertEquals($workDay, $workWeek->workDayAt(DayOfWeek::MONDAY));
    }
    
    /** @test */
    public function it_should_remove_work_day()
    {
        // Given
        $workWeek = CreateWorkWeek::regular();

        // When
        $workWeek->removeWorkDay(DayOfWeek::MONDAY);

        // Then
        self::assertNull($workWeek->workDayAt(DayOfWeek::MONDAY));
    }

    /** @test */
    public function it_should_throw_exception_when_day_of_week_is_invalid()
    {
        $this->expectException(InvalidDayOfWeekException::class);
        $this->expectErrorMessage('Day of week (7) should not be smaller than 0 or larger than 6');

        // Given
        $dayOfWeek = 7;
        $workWeek = CreateWorkWeek::regular();

        // When
        $workWeek->workDayAt($dayOfWeek);

    }
}